generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(cuid())
  name          String
  email         String
  emailVerified Boolean
  isPro         Boolean        @default(false)
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]
  projects      Project[]
  notifications Notification[]

  @@unique([email])
  @@map("user")
}

model Project {
  id        String   @id @default(cuid())
  projectId String   @unique
  name      String
  userId    String
  repoUrl   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  image     String?
  commit    String
  branch    String
  time      String
  type      String
  status    String
  views     Int?     @default(0)
  user      User     @relation(fields: [userId], references: [id])
  logs      Log[]
  projectViews ProjectView[] // Add relationship to ProjectView

  @@unique([userId, repoUrl])
  @@map("project")
}

model ProjectView {
  id            Int      @id @default(autoincrement())
  projectId     String   @map("project_id")
  viewCount     Int      @map("view_count")
  timeInterval  String   @map("time_interval")
  startTime     DateTime @map("start_time")
  endTime       DateTime @map("end_time")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")
  project       Project  @relation(fields: [projectId], references: [projectId])

  @@map("project_view")
}

model Notification {
  id        String   @id @default(cuid())
  value     String
  userId    String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])

  @@map("notification")
}

model Log {
  id        String   @id @default(cuid())
  value     String
  projectId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  type      String
  project   Project  @relation(fields: [projectId], references: [id])

   @@map("log")
}

model Session {
  id        String   @id @default(cuid())
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id @default(cuid())
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id @default(cuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}